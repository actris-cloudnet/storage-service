#!/bin/bash
set -e

if [ -z $1 ]; then
    echo "Action not specified"
    exit 1
fi

action=$1
mode=$2
nodeport=5900
motoport=5901

waitport () {
    timeout=15
    interval=1
    i=0
    echo -n "Waiting for port $1... "
    while ! nc -z localhost $1 2> /dev/null; do
        if [[ "$i" -ge $timeout ]]; then
            echo "Timeout"
            return 2
        fi
        sleep $interval
        i=$((i+$interval))
    done
    echo "OK"
    return 0
}

case "$action" in
    install)
    npm install
    cd python
    python3 -m venv venv
    source venv/bin/activate
    pip3 install -r requirements.txt
    cd ..
    npx tsc --build tsconfig.json
    ./control reset-db
    ;;

    test-start)
    if [ -z $mode ]; then
        echo "Mode not specified. Must be 'local' or 'remote'"
        exit 1
    fi
    export PGDATABASE="ss"
    export SS_MODE="$mode"
    source python/venv/bin/activate
    truncate --size 0 all.log
    if [ "$mode" == "remote" ]; then
        git-crypt unlock
    else
        nohup moto_server -p$motoport >> all.log 2>&1 &
        waitport $motoport
    fi
    nohup npm start >> all.log 2>&1 &
    if [ "$mode" == "local" ]; then
        node init.js
    fi
    waitport $nodeport || (tail -n100 all.log && false)
    ;;

    start)
    ./control test-start $mode
    tail -fn100 all.log
    ;;

    stop)
    set +e
    kill "$(lsof -t -i:$motoport)"
    kill "$(lsof -t -i:$nodeport)"
    ;;

    restart)
    ./control stop
    ./control start $mode
    ;;

    fetch-and-start)
    ./control fetch-remote-db
    ./control start remote
    ;;

    fetch-remote-db)
    echo "Fetching remote db..."
    dropdb ss 2> /dev/null || true
    createdb ss
    ssh -C cloudnet@altocumulus.fmi.fi "pg_dump ss" | psql ss
    ;;

    reset-db)
    dropdb ss || true
    createdb ss
    psql ss < src/db/createtable.sql
    psql ss < src/db/createtable-test.sql
    ;;

    *)
    echo "Unknown action $action"
    exit 1
    ;;

esac
exit 0
